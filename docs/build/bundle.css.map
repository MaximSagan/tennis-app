{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\..\\Icon.svelte",
    "..\\..\\Label.svelte",
    "..\\..\\Underline.svelte",
    "..\\..\\App.svelte",
    "..\\..\\MatchBoard.svelte",
    "..\\..\\PlayerNameInput.svelte"
  ],
  "sourcesContent": [
    "<script>\n\n\n  export let small = false;\n  export let xs = false;\n  export let reverse = false;\n  export let tip = false;\n  export let color = \"default\";\n</script>\n\n<style>\n  .reverse {\n    transform: rotate(180deg);\n  }\n\n  .tip {\n    transform: rotate(90deg);\n  }\n</style>\n\n<i\n  aria-hidden=\"true\"\n  class=\"material-icons icon text-xl {$$props.class} duration-200 ease-in\"\n  class:reverse\n  class:tip\n  on:click\n  class:text-base={small}\n  class:text-xs={xs}\n  style={color ? `color: ${color}` : ''}>\n  <slot />\n</i>\n",
    "<script>\n  import utils, { ClassBuilder, filterProps } from \"../../utils/classes.js\";\n\n\n\n  export let focused = false;\n  export let error = false;\n  export let outlined = false;\n  export let labelOnTop = false;\n  export let prepend = false;\n  export let color = \"primary\";\n  // for outlined button label\n  export let bgColor = \"white\";\n  export let dense = false;\n\n  let labelDefault = `pt-4 absolute top-0 label-transition block pb-2 px-4 pointer-events-none cursor-text`;\n\n  export let add = \"\";\n  export let remove = \"\";\n  export let replace = \"\";\n\n  export let labelClasses = labelDefault;\n\n  const {\n    bg,\n    border,\n    txt,\n    caret,\n  } = utils(color);\n\n  const l = new ClassBuilder(labelClasses, labelDefault);\n\n  let lClasses = i => i;\n\n  $: lClasses = l\n      .flush()\n      .add(txt(), focused && !error)\n      .add('text-error-500', focused && error)\n      .add('label-top text-xs', labelOnTop)\n      .add('text-xs', focused)\n      .remove('pt-4 pb-2 px-4 px-1 pt-0', labelOnTop && outlined)\n      .add(`ml-3 p-1 pt-0 mt-0 bg-${bgColor} dark:bg-dark-500`, labelOnTop && outlined)\n      .remove('px-4', prepend)\n      .add('pr-4 pl-10', prepend)\n      .remove('pt-4', dense)\n      .add('pt-3', dense)\n      .add(add)\n      .remove(remove)\n      .replace(replace)\n      .get();\n\n  const props = filterProps([\n    'focused',\n    'error',\n    'outlined',\n    'labelOnTop',\n    'prepend',\n    'color',\n    'dense'\n  ], $$props);\n</script>\n\n<style>\n.label-top {\n  line-height: 0.05;\n}\n.label-transition {\n  transition: font-size 0.05s, line-height 0.1s;\n}\n:global(label.text-xs) {\n  font-size: 0.7rem;\n}\n</style>\n\n<label class=\"{lClasses} {$$props.class}\" {...props}>\n  <slot />\n</label>\n",
    "<script>\n  import utils, { ClassBuilder, filterProps } from \"../../utils/classes.js\";\n\n\n\n  export let noUnderline = false;\n  export let outlined = false;\n  export let focused = false;\n  export let error = false;\n  export let color = \"primary\";\n\n  let defaultClasses = `mx-auto w-0`;\n\n  export let add = \"\";\n  export let remove = \"\";\n  export let replace = \"\";\n\n  export let lineClasses = defaultClasses;\n\n  const {\n    bg,\n    border,\n    txt,\n    caret,\n  } = utils(color);\n\n  const l = new ClassBuilder(lineClasses, defaultClasses);\n\n  let Classes = i => i;\n\n  $: classes = l\n      .flush()\n      .add(txt(), focused && !error)\n      .add('bg-error-500', error)\n      .add('w-full', focused || error)\n      .add(bg(), focused)\n      .add(add)\n      .remove(remove)\n      .replace(replace)\n      .get();\n\n  const props = filterProps([\n    'focused',\n    'error',\n    'outlined',\n    'labelOnTop',\n    'prepend',\n    'bgcolor',\n    'color'\n  ], $$props);\n</script>\n\n<style>\n.line {\n  height: 1px;\n}\n</style>\n\n<div\n  class=\"line absolute bottom-0 left-0 w-full bg-gray-600 {$$props.class}\"\n  class:hidden={noUnderline || outlined}>\n  <div\n    class=\"{classes}\"\n    style=\"height: 2px; transition: width .2s ease\" />\n</div>\n",
    "<script lang=\"ts\">import \"smelte/src/tailwind.css\";\r\nimport PlayerNameInput from \"./PlayerNameInput.svelte\";\r\nimport { Match } from \"./Match\";\r\nimport MatchBoard from \"./MatchBoard.svelte\";\r\nlet match = null;\r\nconst handleSetPlayerNames = (event) => {\r\n    const { detail } = event;\r\n    match = new Match(detail.player1Name, detail.player2Name);\r\n};\r\nconst handleNewGame = () => {\r\n    match = null;\r\n};\r\n</script>\r\n\r\n<style>\r\n  main {\r\n    height: 100vh;\r\n    display: grid;\r\n    place-items: center;\r\n  }\r\n\r\n  h1 {\r\n    color: #ff3e00;\r\n    text-transform: uppercase;\r\n    font-size: 4em;\r\n    font-weight: 100;\r\n  }\r\n</style>\r\n\r\n<main>\r\n\r\n  {#if match}\r\n    <MatchBoard {match} on:newGame={handleNewGame} />\r\n  {:else}\r\n    <PlayerNameInput on:setPlayerNames={handleSetPlayerNames} />\r\n  {/if}\r\n\r\n</main>\r\n",
    "<script lang=\"ts\">import Button from \"smelte/src/components/Button\";\r\n;\r\n;\r\nimport { createEventDispatcher } from \"svelte\";\r\nexport let match;\r\nlet scoreDisplay = match.score();\r\nlet isMatchedFinished = false;\r\nconst handlePlayerButtonClick = (event) => {\r\n    const playerName = event.target.dataset.player;\r\n    match.pointWonBy(playerName);\r\n    scoreDisplay = match.score();\r\n    isMatchedFinished = match.isMatchFinished;\r\n};\r\nconst dispatch = createEventDispatcher();\r\nconst handleNewGameClick = (event) => {\r\n    dispatch(\"newGame\");\r\n};\r\n</script>\r\n\r\n<style>\r\n  .board {\r\n    min-width: 480px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n  }\r\n  .button-container {\r\n    display: flex;\r\n    width: 100%;\r\n    justify-content: space-around;\r\n  }\r\n  .button-content {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    font-size: 1.5rem;\r\n  }\r\n  .racket {\r\n    font-size: 2rem;\r\n  }\r\n  .reverse {\r\n    transform: scaleX(-1);\r\n  }\r\n\r\n  .score {\r\n    font-size: 2.5rem;\r\n    margin-top: 1rem;\r\n  }\r\n</style>\r\n\r\n<div class=\"max-w-md rounded shadow-lg p-4 board\">\r\n  <div class=\"button-container\">\r\n    {#each [match.player1Name, match.player2Name] as playerName, index (playerName)}\r\n      <Button\r\n        on:click={handlePlayerButtonClick}\r\n        disabled={isMatchedFinished}\r\n        outlined={true}\r\n        data-player={playerName}>\r\n        <div class=\"button-content\">\r\n          {playerName}\r\n          <span class={`racket${index === 1 ? ' reverse' : ''}`}>ðŸŽ¾</span>\r\n        </div>\r\n      </Button>\r\n    {/each}\r\n  </div>\r\n\r\n  <p class=\"score\">{scoreDisplay}</p>\r\n\r\n  {#if isMatchedFinished}\r\n    <p>Match is finished!</p>\r\n    <Button on:click={handleNewGameClick}>New game</Button>\r\n  {/if}\r\n</div>\r\n",
    "<script lang=\"ts\">import TextField from \"smelte/src/components/TextField\";\r\nimport Button from \"smelte/src/components/Button\";\r\nimport { createEventDispatcher } from \"svelte\";\r\nconst PLAYER_1_DEFAULT_NAME = \"Player 1\";\r\nconst PLAYER_2_DEFAULT_NAME = \"Player 2\";\r\nlet player1Name;\r\nlet player2Name;\r\nlet error;\r\n$: error =\r\n    player1Name === PLAYER_2_DEFAULT_NAME\r\n        ? `Player 1 must not be called ${PLAYER_2_DEFAULT_NAME}`\r\n        : player2Name === PLAYER_1_DEFAULT_NAME\r\n            ? `Player 2 must not be called ${PLAYER_1_DEFAULT_NAME}`\r\n            : player1Name && player2Name && player1Name === player2Name\r\n                ? \"Players must have different names\"\r\n                : undefined;\r\nconst dispatch = createEventDispatcher();\r\nconst handleSubmit = () => {\r\n    if (error) {\r\n        return;\r\n    }\r\n    dispatch(\"setPlayerNames\", {\r\n        player1Name: player1Name || \"Player 1\",\r\n        player2Name: player2Name || \"Player 2\",\r\n    });\r\n};\r\n</script>\r\n\r\n<style>\r\n  .form {\r\n    min-width: 480px;\r\n  }\r\n  .error {\r\n    color: red;\r\n    margin-bottom: 0.5rem;\r\n  }\r\n</style>\r\n\r\n<form\r\n  on:submit|preventDefault={handleSubmit}\r\n  class=\"max-w-md rounded shadow-lg p-4 form\">\r\n  <p>Please set player names</p>\r\n  <TextField label=\"Player 1\" bind:value={player1Name} />\r\n  <TextField label=\"Player 2\" bind:value={player2Name} />\r\n  {#if error}\r\n    <p class=\"error\">{error}</p>\r\n  {/if}\r\n  <Button>Start game</Button>\r\n</form>\r\n"
  ],
  "names": [],
  "mappings": "AAWE,QAAQ,cAAC,CAAC,AACR,SAAS,CAAE,OAAO,MAAM,CAAC,AAC3B,CAAC,AAED,IAAI,cAAC,CAAC,AACJ,SAAS,CAAE,OAAO,KAAK,CAAC,AAC1B,CAAC;AC8CH,UAAU,cAAC,CAAC,AACV,WAAW,CAAE,IAAI,AACnB,CAAC,AACD,iBAAiB,cAAC,CAAC,AACjB,UAAU,CAAE,SAAS,CAAC,KAAK,CAAC,CAAC,WAAW,CAAC,IAAI,AAC/C,CAAC,AACO,aAAa,AAAE,CAAC,AACtB,SAAS,CAAE,MAAM,AACnB,CAAC;AClBD,KAAK,cAAC,CAAC,AACL,MAAM,CAAE,GAAG,AACb,CAAC;ACxCC,IAAI,eAAC,CAAC,AACJ,MAAM,CAAE,KAAK,CACb,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,AACrB,CAAC;ACCD,MAAM,cAAC,CAAC,AACN,SAAS,CAAE,KAAK,CAChB,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,WAAW,CAAE,MAAM,AACrB,CAAC,AACD,iBAAiB,cAAC,CAAC,AACjB,OAAO,CAAE,IAAI,CACb,KAAK,CAAE,IAAI,CACX,eAAe,CAAE,YAAY,AAC/B,CAAC,AACD,eAAe,cAAC,CAAC,AACf,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,WAAW,CAAE,MAAM,CACnB,SAAS,CAAE,MAAM,AACnB,CAAC,AACD,OAAO,cAAC,CAAC,AACP,SAAS,CAAE,IAAI,AACjB,CAAC,AACD,QAAQ,cAAC,CAAC,AACR,SAAS,CAAE,OAAO,EAAE,CAAC,AACvB,CAAC,AAED,MAAM,cAAC,CAAC,AACN,SAAS,CAAE,MAAM,CACjB,UAAU,CAAE,IAAI,AAClB,CAAC;AClBD,KAAK,eAAC,CAAC,AACL,SAAS,CAAE,KAAK,AAClB,CAAC,AACD,MAAM,eAAC,CAAC,AACN,KAAK,CAAE,GAAG,CACV,aAAa,CAAE,MAAM,AACvB,CAAC"
}